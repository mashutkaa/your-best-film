

console.log("hello–ª–ª");

// dsfvdvgfdbgfb
const nameInput = document.querySelector("#setting-name");
const oldPasswordInput = document.querySelector("#setting-old-password");
const newPasswordInput = document.querySelector("#setting-new-password");
const confirmBtn = document.querySelector(".confirm-changes-bth");

document.querySelector(".settings-form").addEventListener("submit", (e) => {
  e.preventDefault();
});

confirmBtn.addEventListener("click", async (e) => {
  e.preventDefault();

  const token = localStorage.getItem("token");
  const newUsername = nameInput.value.trim();
  const oldPassword = oldPasswordInput.value;
  const newPassword = newPasswordInput.value;

  if (!newUsername && !oldPassword && !newPassword) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º‚Äô—è –∞–±–æ –∑–º—ñ–Ω—É –ø–∞—Ä–æ–ª—è.");
    return;
  }

  try {
    // üîÑ –ó–º—ñ–Ω–∞ —ñ–º–µ–Ω—ñ
    if (newUsername) {
      const res = await fetch("http://localhost:3000/user/change-username", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ newUsername }),
      });

      const data = await res.json();
      if (res.ok) {
        alert("–Ü–º‚Äô—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
        nameInput.value = "";
      } else {
        alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —ñ–º–µ–Ω—ñ: ${data.error}`);
      }
    }

    // üîÑ –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
    if (oldPassword && newPassword) {
      const res = await fetch("http://localhost:3000/user/change-password", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ oldPassword, newPassword }),
      });

      const data = await res.json();
      if (res.ok) {
        alert("–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!");
        oldPasswordInput.value = "";
        newPasswordInput.value = "";
      } else if (res.status === 401) {
        alert("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å.");
      } else {
        alert(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è: ${data.error}`);
      }
    } else if (oldPassword || newPassword) {
      alert("–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å, –∑–∞–ø–æ–≤–Ω–∏ –æ–±–∏–¥–≤–∞ –ø–æ–ª—è: —Å—Ç–∞—Ä–∏–π —ñ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å.");
    }
  } catch (err) {
    alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.");
    console.error(err);
  }
});

const deleteBtn = document.querySelector(".delete-acc-btn");

deleteBtn.addEventListener("click", async (e) => {
  e.preventDefault();

  const confirmDelete = confirm("–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∞, —â–æ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç?");
  if (!confirmDelete) return;

  const token = localStorage.getItem("token");

  try {
    const res = await fetch("http://localhost:3000/user/delete-account", {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    if (res.ok) {
      window.location.href = "/src/index.html";
      localStorage.removeItem("token");
      alert("–ê–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.");
    } else {
      const data = await res.json();
      alert(`–ü–æ–º–∏–ª–∫–∞: ${data.message}`);
    }
  } catch (err) {
    alert("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.");
  }
});
